//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: Prince of Persia: Warrior Within - Profile.DAT file format
//   Authors: Swyter
//   Version: 2023.01.01
//   Purpose: Profile.DA1 seems to have been generated on safe mode and have priority over the .DAT
//            When the game exits it copies the video and audio section from the last active profile
//            into DefaultProfile.DAT, it will be used the next launch until we pick a different one in the profile selector.
//  Category: Game
// File Mask: *.DAT, *.DA1
//  ID Bytes: 50 4F 50 34
//------------------------------------------------

LittleEndian();
char magic[4]; /* swy: tagged as POP4 */

wchar_t profile_name[11]; /* swy: in UTF-16, wide chars */

enum bool { off, enabled };

typedef struct section_t
{
    enum<uint> { section_controls = 1, section_video = 2, section_audio = 4, section_game = 8, section_unlocks = 16} section_type;
    uint byte_len; uint checksum <format=hex>; /* swy: every byte in the data section is checksummed with CRC-32/JAMCRC i.e. 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' */


    if (section_type == section_controls) /* swy: 256 for SoT; 257 for WW and TT */
    {
        ushort controls_ver_maybe;

        typedef enum<ubyte> /* swy: sourced from Warrior Within's pop4pclocal.dat */
        {
            Roll_Jump_Eject_Accept           =  0,
            Pick_up_Throw_Climb_down_Cancel  =  1,  
            Sword_Attack                     =  2,
            Grab_2nd_weapon_attack           =  3,
            Alternate_View                   =  4,
            Camera_Look                      =  5,
            Rewind_Slowdown                  =  6,
            Walling_Block                    =  7,
            Navigation_Map                   =  8,
            Start                            =  9,
            Reset_camera                     = 10,
            e_L3                             = 11, /* swy: investigate why the default mapping includes this action and sets it to «I». ghost/no-clip mode? */
            Menu_Up                          = 12,
            Menu_Right                       = 13,
            Menu_Down                        = 14,
            Menu_Left                        = 15,
            e_Status                         = 16, /* swy: what's this, maybe debug keys? */
            e_LowerUnit                      = 17,
            e_UpperUnit                      = 18,
            e_AnaStickRightX                 = 19,
            e_AnaStickRightY                 = 20,
            e_AnaStickLeftX                  = 21,
            e_AnaStickLeftY                  = 22,
            e_InfoR                          = 23, /* swy: -> */
            e_InfoL                          = 24, /* swy: <- */
            e_InfoU                          = 25, /* swy:  ^ */
            e_InfoD                          = 26, /* swy:  v */
            e_InfoT                          = 27, /* swy: triangle */
            e_InfoC                          = 28, /* swy: circle */
            e_InfoX                          = 29, /* swy: cross */
            e_InfoS                          = 30, /* swy: square */
            e_InfoL1                         = 31,
            e_InfoR1                         = 32,
            e_InfoL2                         = 33,
            e_InfoR2                         = 34,
            Accelerate                       = 35,
            Decelerate                       = 36,
            Move_Left                        = 37,
            Move_Right                       = 38,
            Move_Forward                     = 39,
            Move_Backward                    = 40,
            Camera_Left                      = 41,
            Camera_Right                     = 42,
            Camera_Forward                   = 43,
            Camera_Backward                  = 44,
            Walk_Toggle                      = 45,
        } action_list;

        typedef enum<ubyte>
        {
            /* swy: DirectInput keyboard scan codes; see https://community.bistudio.com/wiki/DIK_KeyCodes or
                                                         https://gist.github.com/tracend/912308 */
            DIK_ESCAPE = 0x01, DIK_1 = 0x02, DIK_2 = 0x03, DIK_3 = 0x04, DIK_4 = 0x05, DIK_5 = 0x06, DIK_6 = 0x07, DIK_7 = 0x08, DIK_8 = 0x09, DIK_9 = 0x0A, DIK_0 = 0x0B, DIK_MINUS = 0x0C, DIK_EQUALS = 0x0D, DIK_BACK = 0x0E, DIK_TAB = 0x0F, DIK_Q = 0x10, DIK_W = 0x11, DIK_E = 0x12, DIK_R = 0x13, DIK_T = 0x14, DIK_Y = 0x15, DIK_U = 0x16, DIK_I = 0x17, DIK_O = 0x18, DIK_P = 0x19, DIK_LBRACKET = 0x1A, DIK_RBRACKET = 0x1B, DIK_RETURN = 0x1C, DIK_LCONTROL = 0x1D, DIK_A = 0x1E, DIK_S = 0x1F, DIK_D = 0x20, DIK_F = 0x21, DIK_G = 0x22, DIK_H = 0x23, DIK_J = 0x24, DIK_K = 0x25, DIK_L = 0x26, DIK_SEMICOLON = 0x27, DIK_APOSTROPHE = 0x28, DIK_GRAVE = 0x29, DIK_LSHIFT = 0x2A, DIK_BACKSLASH = 0x2B, DIK_Z = 0x2C, DIK_X = 0x2D, DIK_C = 0x2E, DIK_V = 0x2F, DIK_B = 0x30, DIK_N = 0x31, DIK_M = 0x32, DIK_COMMA = 0x33, DIK_PERIOD = 0x34, DIK_SLASH = 0x35, DIK_RSHIFT = 0x36, DIK_MULTIPLY = 0x37, DIK_LMENU = 0x38, DIK_SPACE = 0x39, DIK_CAPITAL = 0x3A, DIK_F1 = 0x3B, DIK_F2 = 0x3C, DIK_F3 = 0x3D, DIK_F4 = 0x3E, DIK_F5 = 0x3F, DIK_F6 = 0x40, DIK_F7 = 0x41, DIK_F8 = 0x42, DIK_F9 = 0x43, DIK_F10 = 0x44, DIK_NUMLOCK = 0x45, DIK_SCROLL = 0x46, DIK_NUMPAD7 = 0x47, DIK_NUMPAD8 = 0x48, DIK_NUMPAD9 = 0x49, DIK_SUBTRACT = 0x4A, DIK_NUMPAD4 = 0x4B, DIK_NUMPAD5 = 0x4C, DIK_NUMPAD6 = 0x4D, DIK_ADD = 0x4E, DIK_NUMPAD1 = 0x4F, DIK_NUMPAD2 = 0x50, DIK_NUMPAD3 = 0x51, DIK_NUMPAD0 = 0x52, DIK_DECIMAL = 0x53, DIK_OEM_102 = 0x56, DIK_F11 = 0x57, DIK_F12 = 0x58, DIK_F13 = 0x64, DIK_F14 = 0x65, DIK_F15 = 0x66, DIK_KANA = 0x70, DIK_ABNT_C1 = 0x73, DIK_CONVERT = 0x79, DIK_NOCONVERT = 0x7B, DIK_YEN = 0x7D, DIK_ABNT_C2 = 0x7E, DIK_NUMPADEQUALS = 0x8D, DIK_PREVTRACK = 0x90, DIK_AT = 0x91, DIK_COLON = 0x92, DIK_UNDERLINE = 0x93, DIK_KANJI = 0x94, DIK_STOP = 0x95, DIK_AX = 0x96, DIK_UNLABELED = 0x97, DIK_NEXTTRACK = 0x99, DIK_NUMPADENTER = 0x9C, DIK_RCONTROL = 0x9D, DIK_MUTE = 0xA0, DIK_CALCULATOR = 0xA1, DIK_PLAYPAUSE = 0xA2, DIK_MEDIASTOP = 0xA4, DIK_VOLUMEDOWN = 0xAE, DIK_VOLUMEUP = 0xB0, DIK_WEBHOME = 0xB2, DIK_NUMPADCOMMA = 0xB3, DIK_DIVIDE = 0xB5, DIK_SYSRQ = 0xB7, DIK_RMENU = 0xB8, DIK_PAUSE = 0xC5, DIK_HOME = 0xC7, DIK_UP = 0xC8, DIK_PRIOR = 0xC9, DIK_LEFT = 0xCB, DIK_RIGHT = 0xCD, DIK_END = 0xCF, DIK_DOWN = 0xD0, DIK_NEXT = 0xD1, DIK_INSERT = 0xD2, DIK_DELETE = 0xD3, DIK_LWIN = 0xDB, DIK_RWIN = 0xDC, DIK_APPS = 0xDD, DIK_POWER = 0xDE, DIK_SLEEP = 0xDF, /* DIK_WAKE = 0xE3, DIK_WEBSEARCH = 0xE5, DIK_WEBFAVORITES = 0xE6, DIK_WEBREFRESH = 0xE7, */ DIK_WEBSTOP = 0xE8, DIK_WEBFORWARD = 0xE9, DIK_WEBBACK = 0xEA, DIK_MYCOMPUTER = 0xEB, DIK_MAIL = 0xEC, DIK_MEDIASELECT = 0xED,
        } scancode;

        typedef enum<ubyte>
        {
            Left_click         =  0,
            Right_click        =  1,
            Middle_click       =  2,
            Mouse_btn_4        =  3,
            Mouse_btn_5        =  4,
            Mouse_btn_6        =  5,
            Mouse_btn_7        =  6,
            Mouse_btn_8        =  7,
            Wheel_up           =  8,
            Wheel_down         =  9,
            Left_double_click  = 10,
            Right_double_click = 11,
        } mousebut;

        typedef enum<ubyte>
        {
            iod_keyboard = 0, iod_mouse = 1, iod_gamepad = 2
        } input_type;

        /* swy: see the unpacked pop4pclocal.dat from POP_Data.BF for the action and key names.
                NOTE: One can unmap actions with Backspace in the press-any-key input box */
        typedef struct mapped_t
        {
            action_list action;
            ubyte index; input_type type;
            ubyte unk, pad[3] <hidden=true>;

                 if (type == iod_keyboard) scancode target;
            else if (type == iod_mouse   ) mousebut target;
            
        } mapped <read=Str("Action_%u - %u - IOD_%u_%u - %s (%u)    [%s]", action, index, type, target, EnumToString(target), target, EnumToString(action)), optimize=false>;

        uint action_count; mapped mapped_action[action_count];

        float mouse_speed; if (controls_ver_maybe >= 257) float gamepad_sensitivity; /* swy: normalized. i.e. 0.135 means 13% in-game */
    }
    else if (section_type == section_video)
    {
        ushort video_ver_maybe;

        enum<uint>   full_screen_t {fs_windowed, fs_full_screen};
        enum<uint> tex_filtering_t {fi_none, fi_bilinear, fi_trilinear};
        enum<uint>   tex_quality_t {tq_low, tq_high};
        enum<uint>    special_fx_t {sp_low, sp_medium, sp_high };
        enum<uint>     shadow_fx_t {sh_none, sh_medium, sh_high };

        switch(video_ver_maybe)
        {
        case 256: /* swy: SoT */
            uint width, height, bitdepth; enum full_screen_t fullscreen;
            uint gamma; /* swy: stored as fixed point x10. i.e. 77 is 0.77 in-game */

            enum tex_filtering_t filtering; special_fx_t special_effects; bool unk; shadow_fx_t shadow_effects; bool j,k,l,m,n,o,p;
            bool water_effects, fog, vsync; tex_quality_t texture_quality; 
            break;

        case 261: /* swy: WW */
            uint width, height; enum full_screen_t fullscreen;
            uint gamma, contrast, brightness; /* swy: stored as fixed point x10. i.e. 165 is 1.65 in-game */
    
            /* swy: there's a disabled advanced video menu for pinch, smartblur, color diffusion, motion blur,
                    lightmaps, halo occlusion and bitdepth, probably some of the unknown fields here; see pop4pclocal.dat */
            enum tex_filtering_t filtering; special_fx_t special_effects; bool unk; shadow_fx_t shadow_effects; bool e,f,g,h,i,j,k,l;
            bool water_effects, fog, vsync; tex_quality_t texture_quality_maybe; bool q,r,s,t,u,v,w,x,y; // [12] water effects [13] fog
            break;

        case 262: /* swy: TT */
            uint width, height; enum full_screen_t fullscreen;
            bool e,f,g,h,y,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,e,f,g,h,y,j,k,l;
            break;

        default:
            uint a[byte_len/4];
            break;

        }
    }
    else if (section_type == section_audio)
    {
        ushort game_ver_maybe; /* swy: always 256 in SoT, WW and TT */

        float music_vol, voices_vol, effects_vol; /* swy: normalized. i.e. 0.455 means 45% in-game */
        bool three_dee_hardware_accel, eax_maybe /* swy: disabled for me */; enum<uint> {none, light, full} audio_virtualization;
    }
    else if (section_type == section_game)
    {
        ushort game_ver_maybe; enum<uint> freq_t {freq_none, freq_few, freq_normal, freq_many}; enum<uint> cam_inversion_t {ci_inverted, ci_normal};

        switch(game_ver_maybe)
        {
        case 256: /* swy: SoT */
            enum cam_inversion_t camera_freelook, camera_navigation; /* swy: shown as part of the Controls section */
            enum freq_t insert_frequency; bool tutorials; /* swy: shown as part of the Game section */
            break;

        case 258: /* swy: WW, TT */
            enum cam_inversion_t free_look, navigation; /* swy: shown as part of the Controls section */
            enum freq_t slow_motion_camera; bool tutorials, subtitles, blood; /* swy: shown as part of the Game section */
            break;

        default:
            uint a[byte_len/4];
            break;
        }
    }
    else if (section_type == section_unlocks)
    {
        ushort i; uint a <format=binary>, b <format=binary>, weapons <format=binary>, weapons_b <format=binary>;
    }
    else
    {
        ushort i; uint a[byte_len/4]; /* swy: the last unknown section (type 16) is only present in WW (ver 256) and TT (ver 257) stores extras/unlocks? */
    }

    //byte data[byte_len];

} section <read=Str("%s (%#x) len: %#x, crc: %#x", EnumToString(section_type), section_type, byte_len, checksum), optimize=false>;

local uint block_count = 0;

while (!FEof())
{
    section block; block_count++;
}



//uint a[4]; ushort b_pad; uint c,width, height, windowed, g,h,i,j, k[25];

//uint thing <format=hex>; short e; float a, b, c; uint a,b,c;


/*

[lololololo]# delsum reverse -m 'crc width=32' --checksums 1F42FBF1,6C83CA3A,4388CD52 checksum_1F42FBF1h.bin checksum_6C83CA3Ah.bin
Could not process model 'crc width=32': Missing parameter 'not enough files for checksums given'

[lololololo]# delsum reverse -m 'crc width=32' --checksums 1F42FBF1,6C83CA3A,4388CD52 checksum_1F42FBF1h.bin checksum_6C83CA3Ah.bin checksum_4388CD52h.bin
crc width=32 poly=0xb5197217 init=0xd0213cd5 xorout=0xf18fbf0a refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0xf8627eb1 init=0xfdef3b69 xorout=0x332e44c7 refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0x87dd389d init=0x27707ec3 xorout=0x8cade733 refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0xefa1cb45 init=0xd7e3f3cc xorout=0x52a22162 refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0xb848c577 init=0x334d38fc xorout=0xc19dd45b refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0xf2143549 init=0x1e07a8bf xorout=0xd8299bd2 refin=false refout=false wordsize=16 out_endian=big
crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big

[lololololo]# delsum reverse -m 'crc width=32' --checksums 1F42FBF1,6C83CA3A,4388CD52,39DBC095 checksum_1F42FBF1h.bin checksum_6C83CA3Ah.bin checksum_4388CD52h.bin checksum_39DBC095h.bin
crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big


[lololololo]# delsum part -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' -c 39DBC095 Profile.DAT
crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big:
        0x26:-0xf5
[lololololo]# delsum part -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' -c 39DBC095 checksum_39DBC095h.bin
crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big:
        0x0:-0x1

[lololololo]# delsum check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' checksum_39DBC095h.bin
39dbc095


checksum_1F42FBF1h.bin - FF1360EC
checksum_6C83CA3Ah.bin - F82AF197
checksum_4388CD52h.bin - FD9E5802
checksum_39DBC095h.bin - F9A9E52A

delsum reverse -m 'crc width=32' --checksums FF1360EC,F82AF197,FD9E5802,F9A9E52A checksum_1F42FBF1h.bin checksum_6C83CA3Ah.bin checksum_4388CD52h.bin checksum_39DBC095h.bin

delsum check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' checksum_B3173EF2h.bin
b3173ef2
delsum check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' Profile.DAT -S 0x120 -E 0x19d # swy: from 0x120 to ((0x120 + 0x7e) - 1) = (0x19e - 1) = 0x19d
b3173ef2
delsum check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' Profile.DAT -S 0x120 -E 0x19d
dee27168
*/