//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: Prince of Persia Trilogy - Reverse-engineered PS2-checksumming functions
//   Authors: Swyter
//   Version: 2023.01.13
//  Category: Game
//------------------------------------------------

/* swy: run the original template to fill out the data structures in
        the template results; we depend on this to work */
RunTemplate("pop_profile_sav_ps2.bt");

uint compute_crc_for_block_ps2(uint offset, uint size) /* swy: calc_checksum_maybe_00525fc0() */
{
  int i; uint align; uint base_offset = offset;
  
  uint ck = 0;

  for (i = size; (i - 8) > 8; i -= 8)
  {
    align = i - 1U & 1;
    ck = (int) (ck) * 3 +         (uint) ReadUByte(offset + 0);
    ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset + 1) + align);

    align = i - 3U & 1;
    ck = (int) (ck) * 3 +         (uint) ReadUByte(offset + 2);
    ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset + 3) + align);

    align = i - 5U & 1;
    ck = (int) (ck) * 3 +         (uint) ReadUByte(offset + 4);
    ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset + 5) + align);

    align = i - 7U & 1;
    ck = (int) (ck) * 3 +         (uint) ReadUByte(offset + 6);
    ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset + 7) + align);

    Printf("%#6x - %#6x - %#010x\n", i, offset, ck); offset += 8;
  }

  align = i -  9U & 1;
  ck = (int) (ck) * 3 +         (uint) ReadUByte(offset +  8);
  ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset +  9) + align);

  align = i - 11U & 1;
  ck = (int) (ck) * 3 +         (uint) ReadUByte(offset + 10);
  ck = (int) (ck) * 3 + (align + 1) * (ReadUByte(offset + 11) + align);

  return ck;

  /* int sav_buf_start = *(int *) sav->start_save; */

  uint flipped_checksum = 0;

  /* swy: write a tailing checksum, right after the buffer. do it in reverse */
  /* *(char *)(sav_buf_start + 0xca1c) */ flipped_checksum |= (char)(ck >> 24); 
  /* *(char *)(sav_buf_start + 0xca1d) */ flipped_checksum |= (char)(ck >> 16);
  /* *(char *)(sav_buf_start + 0xca1e) */ flipped_checksum |= (char)(ck >>  8);
  /* *(char *)(sav_buf_start + 0xca1f) */ flipped_checksum |= (char)(ck >>  0);

  return flipped_checksum.integer;
}


local uint crc = compute_crc_for_block_ps2(startof(checksummed_block), sizeof(checksummed_block));

Assert(crc != 0xffffffff, "CRC computation failed");

Printf(
    "\n[i] %16s: offset: %#5x, len: %#5x, checksum: %#010x/%08x (%s)",
    "intro", startof(checksummed_block), sizeof(checksummed_block),
    tailing_checksum, crc, tailing_checksum == crc ? "OK" : "BAD"
);