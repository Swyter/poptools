//------------------------------------------------
//--- 010 Editor v13.0 Binary Template
//
//      File: Prince of Persia Trilogy - Reverse-engineered PS2-checksumming functions
//   Authors: Swyter
//   Version: 2023.01.13
//  Category: Game
//------------------------------------------------

/* swy: run the original template to fill out the data structures in
        the template results; we depend on this to work */
RunTemplate("pop_profile_sav_ps2.bt");

uint calc_checksum_maybe_00525fc0(ww_save *sav,undefined8 param_unused_maybe,char *param_sav_index_str)
{
  byte *buf;
  int get_save_idx;
  int i;
  uint _aligned;
  int sav_buf_start;
  int cur_size;
  byte *p_buf;
  
  uint ck = 0;

  buf = *(byte **) sav->start_save;
  cur_size = 0xca1c; i = cur_size;

  do {
    _aligned = i - 1U & 1;
    ck = ck * 3 +           (uint) *buf[ 0];
    ck = ck * 3 + (_aligned + 1) * (buf[ 1] + _aligned);

    _aligned = i - 3U & 1;
    ck = ck * 3 +            (uint) buf[ 2];
    ck = ck * 3 + (_aligned + 1) * (buf[ 3] + _aligned);

    _aligned = i - 5U & 1;
    ck = ck * 3 +            (uint) buf[ 4];
    ck = ck * 3 + (_aligned + 1) * (buf[ 5] + _aligned);

    _aligned = i - 7U & 1;
    ck = ck * 3 +            (uint) buf[ 6];
    ck = ck * 3 + (_aligned + 1) * (buf[ 7] + _aligned);

    buf += 8; i -= 8;
  } while ((i - 8) > 8);

  _aligned = i - 9U & 1;
  ck = ck * 3 +            (uint) buf[ 8];
  ck = ck * 3 + (_aligned + 1) * (buf[ 9] + _aligned);

  _aligned = i - 11U & 1;
  ck = ck * 3 +            (uint) buf[10];
  ck = ck * 3 + (_aligned + 1) * (buf[11] + _aligned);

  sav_buf_start = *(int *) sav->start_save;

  /* swy: write a tailing checksum, right after the buffer. do it in reverse */
  *(char *)(/* sav_buf_start + 0xca1c */) = (char)(ck >> 24); 
  *(char *)(/* sav_buf_start + 0xca1d */) = (char)(ck >> 16);
  *(char *)(/* sav_buf_start + 0xca1e */) = (char)(ck >>  8);
  *(char *)(/* sav_buf_start + 0xca1f */) = (char)(ck >>  0);

  return;
}


local uint crc = compute_crc_for_block(startof(checksummed_block), sizeof(checksummed_block));

Assert(crc != 0xffffffff, "CRC computation failed");

Printf(
    "\n[i] %16s: offset: %#5x, len: %#5x, checksum: %#010x/%08x (%s)",
    "intro", startof(checksummed_block), sizeof(checksummed_block),
    tailing_checksum, crc, tailing_checksum == crc ? "OK" : "BAD"
);