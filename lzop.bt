//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: LZOP compressed file format
//   Authors: Swyter
//   Version: 2023.03.13
//   Purpose: Parse LZO-compressed files with the LZOP header.
//  Category: Archive
// File Mask: *.lzo
//  ID Bytes: 89 4C 5A 4F 00
//------------------------------------------------

BigEndian();

typedef struct
{
    ubyte bin_marker <format=hex, comment="swy: binary escape marker for text editors">;
    char magic[4] <bgcolor=cDkGreen>; ubyte version_maybe[4];

    if (bin_marker != 0x89 || magic != "LZO") /* swy: â€°LZO */
    {
        Warning("swy: the LZO header doesn't match; probably you chose the wrong filetype. Bailing out.");
        Exit(1);
    }

    struct 
    {
        ushort bcd_ver <format=hex>, bcd_ver_b <format=hex>, bcd_ver_c <format=hex>;
        ubyte me_a, me_b; uint flags <format=hex>, mode_permissions <format=octal>;
    
        time_t mod_time, mod_time_b <comment="swy: modification time, one of them should be the creation time, I think?">;
        byte len; char filename[len] <bgcolor=cRed, comment="swy: original file name of the packed file">;

    } checksummed_header <open=true, bgcolor=cDkPurple>;
    
    uint checksum_head <format=hex, bgcolor=cBlue, comment="swy: checksum for the whole struct above; usually adler32, but can be changed to crc32 via command-line flags">;
    
    local byte   use_crc32_instead = !!(checksummed_header.flags & 0x1000);
    local uint64 computed_checksum_head = Checksum(use_crc32_instead ? CHECKSUM_CRC32 : CHECKSUM_ADLER32, startof(checksummed_header), sizeof(checksummed_header));
    
    Printf(
        "[i] head %s checksum: %#010x, computed: %#010x (%s) -- %s\n", use_crc32_instead ? "crc32" : "adler32",
                                                                       checksum_head,   computed_checksum_head,
                                                                       checksum_head == computed_checksum_head ? "OK" : "BAD",
                                                                       checksummed_header.filename
    );
    
    /* swy: files bigger than 0x40000 seem to be split in independent chunks */

    local uint64 cumulative_dec_size = 0, cumulative_comp_size = 0, block_count = 0;

    do
    {
        typedef struct
        {
            uint dec_size <format=hex, bgcolor=cDkBlue, comment="swy: size of the decompressed file">,
                comp_size <format=hex, bgcolor=cDkBlue, comment="swy: size of the compressed buffer that follows">;

            if (checksummed_header.flags & 1 /* swy: has an adler32 checksum here */) /* swy: when -F, --no-checksum is *not* used */
                uint adler_data_ck <format=hex, bgcolor=cBlue, comment="swy: this is a checksum of the *uncompressed* data">;
            else
                local uint adler_data_ck = 0;

            if ((checksummed_header.flags & 0x1000 /* swy: use crc32 in general instead of adler32 */) && (checksummed_header.flags & 0x100 /* swy: has a crc32 here at the block level */)) /* swy: --crc32 complicates the code for nothing; stupid */
                uint crc32_data_ck;

            ubyte data_buf[comp_size] <bgcolor=cDkYellow, comment="swy: the real compressed data">;
            
            if (checksummed_header.flags & 1)
            {
              //  local uint64 computed_adler_data_ck = Checksum(CHECKSUM_ADLER32, startof(data_buf), comp_size);
              //  
              //  Printf(
              //      "[i] data adler32 checksum: %#010x, computed: %#010x (%s)\n\n", adler_data_ck,   computed_adler_data_ck,
              //                                                                      adler_data_ck == computed_adler_data_ck ? "OK" : "BAD"
              //  );
            }

            cumulative_dec_size += dec_size; cumulative_comp_size += comp_size; block_count++;
          
        } block <read=Str("(%#x/%x) comp: %u%% -- uncomp'd adler ck: %x", dec_size, comp_size, comp_size * 100 / dec_size, adler_data_ck)>;

        block blk;
    } while(ReadUInt() != 0);

    uint zero_pad <comment="swy: this being zero means that there isn't another concatenated file afterwards">;

} lzop_file <read=Str("[%s] (%#x/%x) comp: %u%%, %u block%s", checksummed_header.filename, cumulative_dec_size, cumulative_comp_size, cumulative_comp_size * 100 / cumulative_dec_size, block_count, block_count > 1 ? "s" : "")>;

while (!FEof())
    lzop_file file;