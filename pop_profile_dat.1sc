//------------------------------------------------
//--- 010 Editor v12.0.1 Script File
//
//      File: Prince of Persia: Warrior Within - Profile.DAT (CRC-recomputer script)
//   Authors: Swyter
//   Version: 2023.01.07
//   Purpose: Recalculate the checksums after tampering with profile files.
//  Category: Game
//------------------------------------------------
uint i = 0, j = 0;

/* swy: run the original template to fill out the data structures in
        the template results; we depend on this to work */
RunTemplate("pop_profile_dat.bt");

char target_file_path[] = GetFileName(); char script_path[] = FileNameGetPath(GetScriptFileName()); SetWorkingDirectory(script_path);

string convert_win_to_wsl_path(char path[])
{
    string path_wsl = "";
    
    /* swy: convert the Windows paths to the format the Windows subsystem for Linux likes. i.e. \ to / and Y: to /mnt/y/ */
    for (i = 0; path[i] != 0; i++)
    {
        if (path[i] == '\\')
            path[i] = '/';
    
        if (path[i + 1] == ':')
            path[i] = ToLower(path[i]);
    
        if (path[i] == ':')
            continue;
    
        path_wsl+= path[i]; j++;
    }

    return Str("/mnt/" + path_wsl);
}

string path_target_wsl = convert_win_to_wsl_path(target_file_path);
string path_script_wsl = convert_win_to_wsl_path(script_path);


uint64 compute_crc_for_block(uint offset, uint size)
{
    // e.g. delsum check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' Profile.DAT -S 0x120 -E 0x19d # swy: from 0x120 to ((0x120 + 0x7e) - 1) = (0x19e - 1) = 0x19d
    uint32 start_offset = offset, end_offset = (offset + size) - 1; /* swy: convert it to delsum's weird byte range format */

    string param = Str("-- cd '%s' && pwd && echo `./delsum.elf check -m 'crc width=32 poly=0x4c11db7 init=0xffffffff xorout=0x0 refin=true refout=true out_endian=big' '%s' -S %#x -E %#x` > delsum_out.txt", path_script_wsl, path_target_wsl, start_offset, end_offset);
    
    int ret; Exec("wsl", param, /* swy: wait */ true, ret); /* swy: returning 0 is good, 127 is bad */
    
    if (ret != 0)
        return 0;
    
    int idx_act_file = GetFileNum();
    int idx_out_file = FileOpen(Str(script_path + "/delsum_out.txt"));

    if (idx_out_file == -1)
        return 0;
    
    string crc_str = ReadString(0); FileClose(); // FileDelete(Str(script_path + "/delsum_out.txt"));

    FileSelect(idx_act_file); /* swy: switch the context back to the actual profile.dat with the template we're working on */

    uint32 crc; SScanf(crc_str, "%x", crc);
    return crc;
}



uint cur_block = 0, overwritten_blocks = 0; uint32 crc;

for (cur_block = 0; cur_block < block_count; cur_block++)
{
    crc = compute_crc_for_block(startof(block[cur_block].checksum) + 4, block[cur_block].byte_len);

    Assert(crc != 0, "CRC computation failed");

    Printf(
        "\n[i] %16s: offset: %#x, len: %#5x, checksum: %#x/%x (%s)",
        EnumToString(block[cur_block].section_type), block[cur_block].byte_len, startof(block[cur_block].checksum) + 4,
        block[cur_block].checksum, crc, block[cur_block].checksum == crc ? "OK" : "BAD"
    );

    /* swy: overwrite it with the correct/new checksum if it's not correct */
    if (block[cur_block].checksum != crc)
    {
        block[cur_block].checksum  = crc;
        overwritten_blocks++;
    }
}

Printf("\n\n[+] Done, overwritten %u/%u.\n", overwritten_blocks, block_count);
