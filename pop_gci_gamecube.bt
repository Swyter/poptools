//------------------------------------------------
//--- 010 Editor v12.0.1k Binary Template
//
//      File: Spyro: A Hero's Tail - GameCube save data (three-slot sections)
//   Authors: Swyter
//   Version: 2022.11.22
//   Purpose: This will probably work for any other GCI saves, I think.
//  Category: Game
// File Mask: *.gci
//------------------------------------------------

BigEndian();

struct
{
    enum<ubyte> gci_tex_fmt { fmt_none = 0, fmt_palette = 1, fmt_truecolor = 2, fmt_palette_pingpong = 5, fmt_truecolor_pingpong = 6 };

    char game_id[4]; char publisher_id[2];
    ubyte unk_ff <format=hex>; gci_tex_fmt banner_format; /* swy: FF 00 = no banner */
    char game_tag[4 + 28];
    uint variable_size_thing_timestamp_maybe <format=hex>;
    uint graphic_assets_offset <format=hex>;
    union { ushort val; struct { ushort a:4; ushort b:4; ushort c:4; ushort d:4; } ind; } icon_frame_color_fmt; /* swy: seems like each nibble controls the format of two frames, so there's probably a maximum of 8 frames */
    ushort icon_anim_speed_data; /* swy: top bit of the second nibble controls animation speed, rest controls the amount of frames somehow */

    ushort unk_a, unk_b;
    ushort storage_blocks, unk_ff;
    uint text_labels_offset <format=hex>;
} gci_head;

Printf("GCI: (%#x bytes - 0x40 of header) / 0x2000 => %.2f storage blocks, stated: %u\n", FileSize(), (FileSize() - 0x40) / 0x2000, gci_head.storage_blocks); /* swy: hex(int(0x18000/12)) = 0x2000 bytes per block? */
Assert(FileSize() == (gci_head.storage_blocks * 0x2000) + 0x40);

FSeek(startof(gci_head) + sizeof(gci_head) + gci_head.text_labels_offset);
char gci_game_title_str[32];
char gci_game_descr_str[32];

FSeek(startof(gci_head) + sizeof(gci_head) + gci_head.graphic_assets_offset);

/* swy: a banner seems to always be 96x32px, the icon seems 32x32px, 96*32 = 3072, 32*32 = 1024 */
/* swy: format 5 seems to be grayscale, 1 too, 2 has colors, takes double of space, 3 no banner, 4 no banner, 6 seems same at 2 */
/* swy: 1/5 = 1 byte is 1 pixel, 2/6 = colors, 0/3/7 = none */

local uint has_palette = (gci_head.banner_format & 0b11) == 1;
local uint banner_byte_size = (96 * 32) * (has_palette ? 1 : 2);
local uint   icon_byte_size = (32 * 32) * 1.5; /* swy: usually 0x600 bytes per icon*/

byte gci_img_banner[banner_byte_size]; /* swy: banner goes first, if any. then the icon, many eurocom games take 0x2000 for both, so I thought it was static */
if (has_palette) byte gci_img_banner_pal[0x200];

local uint frame_count = ((gci_head.icon_frame_color_fmt.ind.a != 0) ? 2 : 0) +
                         ((gci_head.icon_frame_color_fmt.ind.b != 0) ? 2 : 0) +
                         ((gci_head.icon_frame_color_fmt.ind.c != 0) ? 2 : 0) +
                         ((gci_head.icon_frame_color_fmt.ind.d != 0) ? 2 : 0);

byte gci_img_icon  [(32 * 32 * frame_count)]; /* swy: 0x2200, 8 images */
if (has_palette) byte gci_img_icon_pal[0x200];

/* -- */

Assert(gci_head.game_id[1] == '2' && gci_head.game_id[2] == 'O', "This doesn't look like a Prince of Persia: Warrior Within GameCube save. Stopping.");

FSeek(0x3080);
uint head_marker <format=hex>; /* swy: ABCDEF00h */
byte slot_a[0xca1c]; uint pad_align;
byte slot_b[0xca1c]; uint pad_align;
byte slot_c[0xca1c]; uint pad_align;
uint checksum <format=hex>, tail_marker <format=hex>; /* swy: 00FEDCBAh */