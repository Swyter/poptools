//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: Prince of Persia Trilogy - prince.bf, pop3.bf - Jade - BIG binary file format
//   Authors: Swyter
//   Version: 2023.01.30
//  Category: Game
// File Mask: *.bf
//  ID Bytes: 42 49 47 00
//------------------------------------------------

LittleEndian();

struct header
{
    char magic[4]; // BIG
    uint version;
    
    uint elem_count, elem_thing; uint64 long_zero; uint64 long_ffff <format=hex>;
    uint big_a <format=hex>;
    
    uint one, constant <format=hex>;
} hea <open=true>;

uint elem_count_b<comment="same as elem_thing">, elem_thing_b, elem_start_offset <format=hex>, fffs <format=hex>, zero;
uint big_b <format=hex>;

struct
{
    uint offset <format=hex>, id <format=hex>;
    /* -- */
    local uint cur_pos = FTell(); FSeek(offset);
    uint size <format=hex>; ubyte data[size] <bgcolor=cRed>; /* swy: the first four bytes of the pointed data block specify its size */
    FSeek(cur_pos);

} list[hea.elem_count] <optimize=false, read=Str("%X [%X]", offset, id)>; uint empty;

     if (hea.version == 37 && hea.elem_count == 3308) FSeek(0x1796EC); // sot/prince.bf: 1796ECh (pc)
else if (hea.version == 38 && hea.elem_count == 5346) FSeek(0x1C90AC); //  ww/prince.bf: 1C90ACh (pc)
else if (hea.version == 38 && hea.elem_count == 6648) FSeek(0x1C34EC); //  tt/  pop3.bf: 1C34ECh (pc)

else if (hea.version == 38 && hea.elem_count == 3897) FSeek(0x1B5E84); //  ww/prince.bf: 1B5E84h (gc)
else if (hea.version == 38 && hea.elem_count == 5272) FSeek(0x1C07F4); //  ww/prince.bf: 1C07F4h (ps2)
else if (hea.version == 38 && hea.elem_count ==  538) FSeek(0x10F34C); //  ww/prince.bf: 10F34Ch (ps2 demo disc ISO stored as DUMMY.PAD in the ps2 retail build ¯\_(ツ)_/¯)
else if (hea.version == 42 && hea.elem_count == 2517) FSeek(0x009C84); //  tfs/djinn_bin_wii.bf:   9C84h (pal rvl version of the forgotten sands)

/* swy: the string table seems more like a linked list, where entries point to the next and previous file entry */
struct
{
    int aligned_len <format=hex>, next, prev, d <format=hex>, e <format=hex>;
    char str[64];

    if (hea.version >= 42)
    {
        uint more; char sha1_maybe[32]; uint align;
    }
} string_table[hea.elem_count] <read=Str("%X %i %i %X %X - %s", aligned_len, next, prev, d, e, str), optimize=false>;
uint string_table_after;

FSeek(startof(empty)); ubyte space_between[startof(string_table) - startof(empty)] <bgcolor=cGreen>;
FSeek(startof(string_table_after)); ubyte space_after[list[0].offset] <bgcolor=cGreen>;
FSeek(list[0].offset - sizeof(uint)); uint prefix_obvious_offset <format=hex>;

local uint i = 0;

for (i = 0; i < hea.elem_count; i++)
{
    FSeek(list[i].offset);
    struct {
        uint aligned_len <format=hex>;

        local string       filename              = string_table[i].str;
        local   uint st_aligned_len <format=hex> = string_table[i].aligned_len;
        local   uint             id <format=hex> = list[i].id;

             if (id == 0xFC000001) // WOLInfo.bin
        {
            uint entries; struct { uint wol_info[(st_aligned_len / 4) / entries] <format=hex>; } wol_entry[entries] <optimize=false>;
        }
        else if (id == 0xFC000002) // size.grs
        {
            struct { uint id <format=hex>, size <format=hex>; } entries[hea.elem_count] <read=Str("%x %x", id, size)>;
        }
        else
            ubyte data[aligned_len] <format=hex>;

    } file <read=Str("%s (%x/%x) [%x]", filename, aligned_len, st_aligned_len, id)>;
}