//------------------------------------------------
//--- 010 Editor v13.0.1 Binary Template
//
//      File: Prince of Persia Trilogy - prince.bf, pop3.bf - Jade BIG format
//   Authors: Swyter
//   Version: 2023.01.30
//  Category: Game
// File Mask: *.bf
//  ID Bytes: 42 49 47 00
//------------------------------------------------

LittleEndian();

char magic[4]; // BIG
uint version;

uint elem_count, elem_thing; uint64 long_zero; uint64 long_ffff <format=hex>;
uint big_a <format=hex>;

uint one, constant <format=hex>;

uint elem_count_b<comment="same as elem_thing">, elem_thing_b, elem_start_offset <format=hex>, fffs <format=hex>, zero;
uint big_b <format=hex>;

struct
{
    uint offset <format=hex>, id <format=hex>;
    /* -- */
    local uint cur_pos = FTell(); FSeek(offset);
    uint size <format=hex>; ubyte data[size] <bgcolor=cRed>; /* swy: the first four bytes of the pointed data block specify its size */
    FSeek(cur_pos);

} list[elem_count] <optimize=false, read=Str("%X [%X]", offset, id)>; uint empty;

     if (version == 37 && elem_count == 3308) FSeek(0x1796EC); // sot/prince.bf: 1796ECh (pc)
else if (version == 38 && elem_count == 5346) FSeek(0x1C90AC); //  ww/prince.bf: 1C90ACh (pc)
else if (version == 38 && elem_count == 6648) FSeek(0x1C34EC); //  tt/  pop3.bf: 1C34ECh (pc)

else if (version == 38 && elem_count == 3897) FSeek(0x1B5E84); //  ww/prince.bf: 1B5E84h (gc)

/* swy: the string table seems more like a linked list, where entries point to the next and previous file entry */
struct
{
    int aligned_len <format=hex>, next, prev, d <format=hex>, e <format=hex>;
    char str[64];
} string_table[elem_count] <read=Str("%X %i %i %X %X - %s", aligned_len, next, prev, d, e, str)>;

FSeek(startof(empty)); ubyte space_between[startof(string_table) - startof(empty)] <bgcolor=cGreen>;


local uint i = 0;

for (i = 0; i < elem_count; i++)
{
    FSeek(list[i].offset);
    struct {
        uint aligned_len <format=hex>;

        if (string_table[i].str == "size.grs")
        {
            struct { uint id <format=hex>, size <format=hex>; } entries[elem_count] <read=Str("%x %x", id, size)>;
        }
        else
            ubyte data[aligned_len];

        local string       filename = string_table[i].str;
        local   uint st_aligned_len = string_table[i].aligned_len;

    } file <read=Str("%s (%x/%x)", filename, aligned_len, st_aligned_len)>;
}